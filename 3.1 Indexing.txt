3.1

library(tidyverse)
library(dslabs)
data(murders)

# defining murder rate as before
murder_rate <- murders$total / murders$population * 100000
# creating a logical vector that specifies if the murder rate in that state is less than or equal to 0.71
index <- murder_rate <= 0.71

> index
# determining which states have murder rates less than or equal to 0.71
murders$state[index]

True -> 1
False ->0

[1] "Hawaii"        "Iowa"         
[3] "New Hampshire" "North Dakota" 
[5] "Vermont" 


# calculating how many states have a murder rate less than or equal to 0.71
sum(index)

[1] 5

***********************
# creating the two logical vectors representing our conditions
west <- murders$region == "West"
safe <- murder_rate <= 1
# defining an index and identifying states with both conditions true
index <- safe & west



Indexing Functions



x <- c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE)
which(x)    # returns indices that are TRUE
> which(x)
[1] 2 4 5

# to determine the murder rate in Massachusetts we may do the following
index <- which(murders$state == "Massachusetts")
index
> index
[1] 22

murder_rate[index]
> murder_rate[index]
[1] 1.802179


# "match" looks for entries in a vector and returns the index needed to access them.
# to obtain the indices and subsequent murder rates of New York, Florida, Texas, we do:
index <- match(c("New York", "Florida", "Texas"), murders$state)
index

> index
[1] 33 10 44


murder_rate[index]
murders$state[index]
> murders$state[index]
[1] "New York" "Florida"  "Texas"  


> murders$state[index]
[1] "New York" "Florida"  "Texas"   
> murder_rate[index]
[1] 2.667960 3.398069 3.201360


x <- c("a", "b", "c", "d", "e")
y <- c("a", "d", "f")
y %in% x

[1]  TRUE  TRUE FALSE


# to see if Boston, Dakota, and Washington are states
c("Boston", "Dakota", "Washington") %in% murders$state

[1] FALSE FALSE  TRUE






####################
install.packages('dplyr') 
library(dplyr)
=> mutate 才能用

####################
 
